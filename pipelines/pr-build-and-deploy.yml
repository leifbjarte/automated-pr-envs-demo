trigger: none

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: 'Visual Studio Professional(8ba210c5-c187-44bb-9d0b-858282bb4487)'
  functionsPackage: '$(Pipeline.Workspace)/functions/FagKaffe.Functions.zip'
  apiPackage: '$(Pipeline.Workspace)/api/FagKaffe.Api.zip'
  prNumber: $(system.pullRequest.pullRequestNumber)

stages:
- stage: BuildApi
  displayName: Build API
  jobs:
  - job: BuildApi
    steps:

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'api'

- stage: BuildFunction
  displayName: Build Function
  jobs:
  - job: Build
    pool: 
      vmImage: 'windows-latest'
    variables:
      projectPath: 'src/FagKaffe.Functions'
      projectName: 'FagKaffe.Functions'

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '$(projectPath)/$(projectName).csproj'

    - task: MSBuild@1
      displayName: 'Build function app'
      inputs:
        solution: '$(projectPath)/*.csproj'
        configuration: 'Release'
        msbuildArguments: '/t:Publish /p:PublishDir="$(Build.BinariesDirectory)\\"'

    - task: ArchiveFiles@2
      displayName: 'Compress published function to zip'
      inputs:
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(projectName).zip'

    - task: DeleteFiles@1
      displayName: 'Delete files from $(Build.BinariesDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)'
        Contents: '*'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'functions'

- stage: DeployARM
  displayName: 'Deploy ARM template'
  dependsOn: []
  variables:
    templateFile: $(Build.SourcesDirectory)/arm-templates/pr-specific-resources.json

  jobs:
  - deployment: Deploy
    displayName: 'Deploy ARM'
    environment: fagkaffe-pr
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzurePowerShell@4
            displayName: 'Deploy ARM infrastructure template'
            inputs:
              azureSubscription: $(subscription)
              ScriptType: 'InlineScript'
              Inline: |
                $prNumber = "$($env:PRNUMBER)"
                $templateFile = $($env:TEMPLATEFILE)
                $resourceGroup = "fagkaffe-infra"
                
                Write-Host "Using pr number: $prNumber"
                Write-Host "Using resource group: $resourceGroup"
                Write-Host "Using template file: $templateFile"
                
                New-AzResourceGroupDeployment -Mode Incremental `
                  -Name "fagkaffe-infra-$prNumber" `
                  -ResourceGroupName $resourceGroup `
                  -TemplateFile $templateFile `
                  -pr-number $prNumber
                
              FailOnStandardError: true
              azurePowerShellVersion: 'LatestVersion'
              
- stage: DeployFunction
  displayName: 'Deploy function app'
  dependsOn: 
  - DeployARM
  - BuildFunction
  condition: succeeded()
  
  variables:
    functionServiceName: fagkaffe-func-$(prNumber)

  jobs:
  - deployment: Deploy
    displayName: 'Deploy function job'
    environment: fagkaffe-pr
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: $(subscription)
                appType: functionAppLinux
                appName: $(functionServiceName)
                package: $(functionsPackage)
            
            - task: AzureAppServiceManage@0
              displayName: 'Restart function app'
              inputs:
                azureSubscription: $(subscription)
                WebAppName: $(functionServiceName)
                Action: 'Restart Azure App Service'